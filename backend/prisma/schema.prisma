// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime                @default(now())
  email                  String                  @unique
  username               String                  @unique
  displayName            String?
  passwordHash           String
  role                   Role                    @default(STUDENT)
  authType               AuthType                @default(EMAILPASS)
  userProfile            UserProfile?
  clubMemberInfo         ClubMemberInfo?
  changePasswordRequests ChangePasswordRequest[]
}

enum Role {
  ADMIN
  STUDENT
  FACULTY
  TRANSPORT
  CAFETERIA
  CLUB
}

enum AuthType {
  EMAILPASS
  OAUTH
}

model UserProfile {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  profileIntro String?
  designation  String?
  avatarUrl    String?
  socialLinks  SocialLink[]
  tenureStart  DateTime
  tenureEnd    DateTime
  clubGoals    String?
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @unique @db.ObjectId
}

model SocialLink {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  host        SocialLinkHost @default(UNKNOWN)
  userProfile UserProfile    @relation(fields: [userId], references: [userId])
  userId      String         @unique @db.ObjectId
}

enum SocialLinkHost {
  LINKEDIN
  GITHUB
  FACEBOOK
  INSTAGRAM
  MAIL
  TWITTER
  UNKNOWN
}

model ClubMemberInfo {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  memberId    Int        @unique
  designation MemberRole @default(MEMBER)
  tenureStart DateTime
  tenureEnd   DateTime
  clubGoals   String?
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @unique @db.ObjectId
}

enum MemberRole {
  PRESIDENT
  GENERAL_SECRETARY
  VP_TECHNICAL
  VP_ORGANIZING
  VP_PUBLIC_RELATION
  TREASURER
  JOINT_SECRETARY
  ASSISTANT_SECRETARY_TECHNICAL
  ASSISTANT_SECRETARY_ORGANIZING
  ASSISTANT_SECRETARY_PUBLIC_RELATION
  ASSISTANT_SECRETARY_BRAND_MANAGEMENT
  ASSISTANT_TREASURER
  EXECUTIVE_MEMBER
  MEMBER
}

model ChangePasswordRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  token        String   @unique
  reqIpAddress String
  requestedAt  DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique @db.ObjectId
}
